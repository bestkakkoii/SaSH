/*
				GNU GENERAL PUBLIC LICENSE
				   Version 2, June 1991
COPYRIGHT (C) Bestkakkoii 2023 All Rights Reserved.
This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.
This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
GNU General Public License for more details.
You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.

*/

#include "stdafx.h"
#include "mapanalyzer.h"
#include "astar.h"
#include <net/tcpserver.h>
#include "injector.h"

constexpr const char* kDefaultSuffix = u8".dat";

//不可通行地面、物件數據 或 傳點|樓梯
#pragma region StaticTable
//上樓樓梯
static const QSet<uint16_t> UP = {
	10685, 10686, 10687, 10688
};

//下樓樓梯
static const QSet<uint16_t> DOWN = {
	10681, 10682, 10683, 10684
};

static const QSet<uint16_t> JUMP = {

};

//1 * 1 牆壁 
static const QSet<uint16_t> WALL = {

};

static const QSet<uint16_t> WATER = {
	193, 194, 195, 196, 574, 575, 576, 577, 578, 579, 580,

	//洞窟 藍
	4020, 4021, 4022,
	4023, 4024, 4025, 4026, 4027, 4028, 4029, 4030, 4031, 4032, 4033, 4034, 4035,

	//洞窟 紅
	4220, 4221, 4222, 4223,

	//洞窟 黃
	4320, 4321, 4322, 4323, 4324,
	4325, 4326, 4327, 4328, 4329, 4330, 4331, 4332, 4333, 4334, 4335,
};

//不可通行的地型
static const QSet<uint16_t> GROUND = {
	60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 99, 300, 301, 302, 303, 304,
	305, 306, 307, 308, 310, 312, 313, 314, 315, 316, 317, 318, 319, 322, 324, 325, 326, 327,
	328, 329, 330, 331, 336, 337, 338, 339, 340, 341, 342, 343, 344, 348, 349, 350, 351, 352,
	353, 354, 355, 409, 410, 411, 412, 583, 585, 586, 587,
	593, 594, 595, 597, 599, 600, 601, 605, 607, 608, 609, 611, 615, 833, 834, 835, 836, 837,
	838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855,
	856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873,
	874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891,
	892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909,
	910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927,
	928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945,
	946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963,
	964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981,
	982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999,
	1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013,
	1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027,
	1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 2109, 2111,
	2113, 2115, 2116, 2117, 2118, 2119, 2121, 2123, 2125, 2127, 2128, 2129, 2130, 2131,
	2133, 2135, 2137, 2139, 2140, 2141, 2142, 2143, 2357, 2358, 2359, 2360, 2361, 2362,
	2363, 2364, 3100, 3101, 3102, 3103, 3104, 3105, 3106, 3107, 3108, 3109, 3110, 3111,
	3112, 3113, 3114, 3115, 3116, 3117, 3118, 3119, 3120, 3121, 3122, 3123, 3124, 3125,
	3126, 3127, 3128, 3129, 3130, 3131, 3132, 3133, 3134, 3135, 3136, 4037,
	4039, 4041, 4043, 4044, 4045, 4046, 4047, 4049, 4051, 4053, 4055, 4056, 4057, 4058,
	4059, 4061, 4063, 4065, 4067, 4068, 4069, 4070, 4071, 4237,
	4239, 4241, 4243, 4244, 4245, 4246, 4247, 4249, 4251, 4253, 4255, 4256, 4257, 4258,
	4259, 4261, 4263, 4265, 4267, 4268, 4269, 4270, 4271, 4337, 4339, 4341,
	4343, 4344, 4345, 4346, 4347, 4349, 4351, 4353, 4355, 4356, 4357, 4358, 4359, 4361,
	4363, 4365, 4367, 4368, 4369, 4370, 4371, 4420, 4421, 4422, 4423, 4424, 4425, 4426,
	4427, 4428, 4429, 4430, 4431, 4432, 4433, 4434, 4435, 4437, 4439, 4441, 4443, 4444,
	4445, 4446, 4447, 4449, 4451, 4453, 4455, 4456, 4457, 4458, 4459, 4460, 4461, 4463,
	4465, 4467, 4468, 4469, 4470, 4471, 6062, 6063, 6064, 6065, 6074, 6075, 6076, 6077,
	6086, 6087, 6088, 6089, 6098, 6099, 6100, 6101, 6110, 6111, 6112, 6113, 6122, 6123,
	6124, 6125, 6685, 6687, 6689, 6691, 6692, 6693, 6694, 6695, 6697, 6699, 6701, 6703,
	6704, 6705, 6706, 6707, 6709, 6711, 6713, 6715, 6716, 6717, 6718, 6719, 6721, 6723,
	6725, 6727, 6728, 6729, 6730, 6731, 6733, 6735, 6737, 6739, 6740, 6741, 6742, 6743,
	6745, 6747, 6749, 6751, 6752, 6753, 6754, 6755, 8850, 8851, 8852, 8853, 8854, 8855,
	8856, 8857, 8858, 8859, 8860, 8861, 8862, 8863, 8864, 8865, 8866, 8867, 8868, 8869,
	8870, 8871, 8872, 8873, 8874, 8875, 8876, 8877, 8878, 8879, 8880, 8881, 8882, 8883,
	8884, 8885, 8886, 8887, 8888, 8889, 8890, 8891, 8892, 8893, 8894, 8895, 8896, 8897,
	8898, 8899, 8900, 8901, 8902, 8903, 8904, 8905, 8906, 8907, 8908, 8909, 8910, 8911,
	8912, 8913, 8914, 8915, 8916, 8917, 8918, 8919, 8920, 8921, 8922, 8923, 8924, 8925,
	8926, 8927, 8928, 8929, 8930, 8931, 8932, 8933, 8934, 8935, 8936, 8937, 8938, 8939,
	8940, 8941, 8942, 8943, 8944, 8945, 8946, 8947, 8948, 8949, 8950, 8951, 8952, 8953,
	8954, 8955, 8956, 8957, 8958, 8959, 8960, 8961, 8962, 8963, 8964, 8965, 8966, 8967,
	8968, 8969, 8970, 8971, 8972, 8973, 8974, 8975, 8976, 8977, 8978, 8979, 8980, 8981,
	8982, 8983, 8984, 8985, 8986, 8987, 8988, 8989, 8990, 8991, 8992, 8993, 8994, 8995,
	8996, 8997, 8998, 8999, 9000, 9001, 9002, 9003, 9004, 9005, 9006, 9007, 9008, 9009,
	9010, 9011, 9012, 9013, 9014, 9015, 9016, 9017, 9018, 9019, 9020, 9021, 9022, 9023,
	9024, 9025, 9026, 9027, 9028, 9029, 9030, 9031, 9032, 9033, 9034, 9035, 9036, 9037,
	9038, 9039, 9040, 9041, 9042, 9043, 9044, 9045, 9046, 9047, 9048, 9049, 9050, 9051,
	9052, 9053, 9054, 9055, 9056, 9057, 9058, 9059, 9060, 9061, 9062, 9063, 9064, 9065,
	9066, 9067, 9068, 9069, 9070, 9071, 9072, 9073, 9074, 9075, 9076, 9077, 9078, 9079,
	9080, 9081, 9082, 9083, 9084, 9085, 9086, 9087, 9088, 9089, 9090, 9091, 9092, 9093,
	9094, 9095, 9096, 9097, 9098, 9099, 9100, 9101, 9102, 9103, 9104, 9105, 9106, 9107,
	9108, 9109, 9110, 9111, 9112, 9113, 9114, 9115, 9116, 9117, 9118, 9119, 9120, 9121,
	9122, 9123, 9124, 9125, 9126, 9127, 9128, 9129, 9130, 9131, 9132, 9133, 9134, 9135,
	9136, 9137, 9138, 9139, 9140, 9141, 9142, 9143, 9144, 9145, 9146, 9147, 9148, 9149,
	9150, 9151, 9152, 9153, 9154, 9155, 9156, 9157, 9158, 9159, 9160, 9161, 9162, 9163,
	9164, 9165, 9166, 9167, 9168, 9169, 9170, 9171, 9172, 9173, 9174, 9175, 9176, 9177,
	9178, 9179, 9180, 9181, 9182, 9183, 9184, 9185, 9186, 9187, 9188, 9189, 9190, 9191,
	9192, 9193, 9194, 9195, 9196, 9197, 9198, 9199, 9200, 9201, 9202, 9203, 9204, 9205,
	9206, 9207, 9208, 9209, 9210, 9211, 9212, 9213, 9214, 9215, 9216, 9217, 9218, 9219,
	9220, 9221, 9222, 9223, 9224, 9225, 9226, 9227, 9228, 9229, 9230, 9231, 9232, 9233,
	9234, 9235, 9236, 9237, 9238, 9239, 9240, 9241, 9242, 9243, 9244, 9245, 9246, 9247,
	9248, 9249, 9250, 9251, 9252, 9253, 9254, 9255, 9256, 9257, 9258, 9259, 9260, 9261,
	9262, 9263, 9264, 9265, 9266, 9267, 9268, 9269, 9270, 9271, 9272, 9273, 9274, 9275,
	9276, 9277, 9278, 9279, 9280, 9281, 9282, 9283, 9284, 9285, 9286, 9287, 9288, 9289,
	9290, 9291, 9292, 9293, 9294, 9295, 9296, 9297, 9298, 9299, 9300, 9301, 9302, 9303,
	9304, 9305, 9306, 9307, 9308, 9309, 9310, 9311, 9312, 9313, 9314, 9315, 9316, 9317,
	9318, 9319, 9320, 9321, 9322, 9323, 9324, 9325, 9326, 9327, 9328, 9329, 9330, 9331,
	9332, 9333, 9334, 9335, 9336, 9337, 9338, 9339, 9340, 9341, 9342, 9343, 9344, 9345,
	9346, 9347, 9348, 9349, 9350, 9351, 9352, 9353, 9354, 9355, 9356, 9357, 9358, 9359,
	9360, 9361, 9362, 9363, 9364, 9365, 9366, 9367, 9368, 9369, 9370, 9371, 9372, 9373,
	9374, 9375, 9376, 9377, 9378, 9379, 9380, 9381, 9382, 9383, 9384, 9385, 9386, 9387,
	9388, 9389, 9390, 9391, 9392, 9393, 9394, 9395, 9396, 9397, 9398, 9399, 9400, 9401,
	9402, 9403, 9404, 9405, 9406, 9407, 9408, 9409, 9410, 9411, 9412, 9413, 9414, 9415,
	9416, 9417, 9418, 9419, 9440, 9441, 9442, 9443, 9444, 9445, 9446, 9447, 9448, 9449,
	9450, 9451, 9452, 9453, 9454, 9455, 9456, 9457, 9458, 9459, 9460, 9461, 9462, 9463,
	9464, 9465, 9466, 9467, 9468, 9469, 9470, 9471, 9472, 9473, 9474, 9475, 9476, 9477,
	9478, 9479, 9480, 9481, 9482, 9483, 9484, 9485, 9486, 9487, 9488, 9489, 9490, 9491,
	9492, 9493, 9494, 9495, 9496, 9497, 9498, 9499, 9500, 9501, 9502, 9503, 9504, 9505,
	9506, 9507, 9508, 9509, 9510, 9511, 9512, 9513, 9514, 9515, 9516, 9517, 9518, 9519,
	9520, 9521, 9522, 9523, 9524, 9525, 9526, 9527, 9528, 9529, 9530, 9531, 9532, 9533,
	9534, 9535, 9536, 9537, 9538, 9539, 9540, 9541, 9542, 9543, 9544, 9545, 9546, 9547,
	9548, 9549,
};

//所有類型的 1 * 1 障礙物件
static const QSet<uint16_t> ROCK = {
	8165, 8166, 8167, 8168, 8169, 8170, 8171, 8172, 8173, 8174, 8175, 8176, 8177, 8178,
	8179, 8180, 8181, 8182, 8183, 8184, 8185, 8186, 8187, 8188, 8189, 8190, 8191, 8192,
	8193, 8194, 8195, 8196, 8197, 8198, 8199, 8200, 8201, 8202, 8203, 8204, 8205, 8206,
	8207, 8208, 8209, 8210, 8211, 8212, 8213, 8214, 8215, 8216, 8217, 8218, 8219, 8220,
	8221, 8222, 8223, 8224, 8225, 8226, 8227, 8228, 8229, 8230, 8231, 8232, 8233, 8234,
	8235, 8236, 8237, 8238, 8239, 8240, 8241, 8242, 8243, 8244, 8245, 8246, 8247, 8248,
	8249, 8250, 8251, 8252, 8253, 8254, 8255, 8256, 8257, 8258, 8259, 8260, 8261, 8262,
	8263, 8264, 8265, 8266, 8267, 8268, 8269, 8270, 8271, 8272, 8273, 8274, 8275, 8276,
	8277, 8278, 8279, 8280, 8281, 8282, 8283, 8284, 8285, 8286, 8287, 8288, 8289, 8290,
	8291, 8292, 8293, 8294, 8295, 8296, 8297, 8298, 8299, 8300, 8301, 8302, 8303, 8304,
	8305, 8306, 8307, 8308, 8309, 8310, 8311, 8312, 8313, 8314, 8315, 8316, 8317, 8318,
	8319, 8320, 8321, 8322, 8323, 8324, 8325, 8326, 8327, 8328, 8329, 8330, 8331, 8332,
	8333, 8334, 8335, 8336, 8337, 8338, 8339, 8340, 8341, 8342, 8343, 8344, 8345, 8346,
	8347, 8348, 8349, 8350, 8351, 8352, 8353, 8354, 8355, 8356, 8357, 8358, 8359, 8360,
	8361, 8362, 8363, 8364, 8365, 8366, 8367, 8368, 8369, 8370, 8371, 8372, 8373, 8374,
	8375, 8376, 8377, 8378, 8379, 8380, 8381, 8382, 8383, 8384, 8385, 8386, 8387, 8388,
	8389, 8390, 8391, 8392, 8393, 8394, 8395, 8396, 8397, 8398, 8399, 8400, 8401, 8402,
	8403, 8404, 8405, 8406, 8407, 8408, 8409, 8410, 8411, 8412, 8413, 8414, 8415, 8416,
	8417, 8418, 8419, 8420, 8421, 8422, 8423, 8424, 8425, 8426, 8427, 8428, 8429, 8430,
	8431, 8432, 8433, 8434, 8435, 8436, 8437, 8438, 8439, 8440, 8441, 8442, 8443, 8444,
	8445, 8446, 8447, 8448, 8449, 8450, 8451, 8452, 8453, 8454, 8455, 8456, 8457, 8458,
	8459, 8460, 8461, 8462, 8463, 8464, 8465, 8466, 8467, 8468, 8469, 8470, 8471, 8472,
	8473, 8474, 8475, 8476, 8477, 8478, 8479, 8480, 8481, 8482, 8483, 8484, 8485, 8486,
	8487, 8488, 8489, 8490, 8491, 8492, 8493, 8494, 8495, 8496, 8497, 8498, 8499, 8500,
	8501, 8502, 8503, 8504, 8505, 8506, 8507, 8508, 8509, 8510, 8511, 8512, 8513, 8514,
	8515, 8516, 8517, 8518, 8519, 8520, 8521, 8522, 8523, 8524, 8525, 8526, 8527, 8528,
	8529, 8530, 8531, 8532, 8533, 8534, 8535, 8536, 8537, 8538, 8539, 8540, 8541, 8542,
	8543, 8544, 8545, 8546, 8547, 8548, 8549, 8550, 8551, 8552, 8553, 8554, 8555, 8556,
	8557, 8558, 8559, 8560, 8561, 8562, 8563, 8564, 8565, 8566, 8567, 8568, 8569, 8570,
	8571, 8572, 8573, 8574, 8575, 8576, 8577, 8578, 8579, 8580, 8581, 8582, 8583, 8584,
	8585, 8586, 8587, 8588, 8589, 8590, 8591, 8592, 8593, 8594, 8595, 8596, 8597, 8598,
	8599, 8600, 8601, 8602, 8603, 8604, 8605, 8606, 8607, 8608, 8609, 8610, 8611, 8612,
	8613, 8614, 8615, 8616, 8617, 8618, 8619, 8620, 8621, 8622, 8623, 8624, 8625, 8626,
	8627, 8628, 8629, 8630, 8631, 8632, 8633, 8634, 8635, 8636, 8637, 8638, 8639, 8640,
	8641, 8642, 8643, 8644, 8645, 8646, 8647, 8648, 8649, 8650, 8651, 8652, 8653, 8654,
	8655, 8656, 8657, 8658, 8659, 8660, 8661, 8662, 8663, 8664, 8665, 8666, 8713, 8714,
	8715, 8716, 8717, 8718, 8719, 8720, 8721, 8722, 8723, 8724, 8725, 8726, 8727, 8728,
	8729, 8730, 8731, 8732, 8733, 8734, 8735, 8736, 8737, 8738, 8739, 8740, 8741, 8742,
	8743, 8744, 8745, 8746, 8747, 8748, 8749, 8750, 8751, 8752, 8753, 8754, 8755, 8756,
	8757, 8758, 8759, 8760, 8764, 8765, 8766, 8776, 8777, 8778, 8779, 8780, 8781, 8782,
	8783, 8784, 8785, 8786, 8787, 8788, 8789, 8790, 8791, 8792, 8793, 8794, 8795, 8796,
	8797, 8798, 8799, 8800, 8801, 8802, 8803, 8804, 8805, 8806, 8807, 8808, 8809, 8810,
	8811, 8812, 8813, 8814, 10019, 10020, 10021, 10026, 10027, 10028, 10029, 10030,
	10031, 10052, 10053, 10054, 10055, 10060, 10061, 10062, 10063, 10071, 10074, 10077,
	10078, 10080, 10081, 10082, 10083, 10084, 10086, 10098, 10099, 10120, 10130, 10131,
	10153, 10154, 10155, 10156, 10161, 10162, 10172, 10173, 10178, 10193, 10194, 10200,
	10204, 10205, 10206, 10207, 10208, 10209, 10215, 10309, 10311, 10312, 10313, 10400,
	10401, 10402, 10403, 10404, 10625, 10626, 10627, 10632, 10634, 10650, 10651, 10652,
	10653, 10654, 10666, 10667, 10670, 10672, 10676, 10677, 10679, 10680, 10730, 10731,
	10732, 10733, 10734, 10735, 10736, 10737, 10738, 10739, 10740, 10741, 10742, 10743,
	10744, 10745, 10746, 10747, 10748, 10749, 10750, 10751, 10752, 10753, 10754, 10755,
	10756, 10757, 10758, 10759, 10760, 10761, 10789, 10790, 10807, 10810, 10811, 10812,
	10815, 10816, 10817, 10818, 10819, 10822, 10849, 10850, 10851, 10852, 10853, 10854,
	10855, 10856, 10857, 10858, 10859, 10860, 10904, 10905, 10906, 10907, 10908, 10909,
	10910, 10911, 10912, 10934, 10935, 10942, 10943, 10960, 10961, 10962, 10963, 10968,
	10969, 10973, 10980, 10981, 11020, 11021, 11022, 11023, 11024, 11025, 11026, 11027,
	11028, 11029, 11030, 11031, 11032, 11033, 11034, 11035, 11036, 11037, 11038, 11039,
	11040, 11041, 11042, 11043, 11044, 11045, 11046, 11047, 11048, 11049, 11050, 11051,
	11052, 11053, 11054, 11055, 11056, 11057, 11058, 11059, 11060, 11061, 11062, 11063,
	11064, 11065, 11066, 11067, 11068, 11069, 11070, 11071, 11072, 11073, 11074, 11075,
	11076, 11077, 11078, 11079, 11080, 11081, 11082, 11083, 11084, 11085, 11086, 11087,
	11088, 11089, 11090, 11091, 11100, 11101, 11102, 11103, 11104, 11105, 11106, 11112,
	11113, 11114, 11115, 11116, 11117, 11118, 11119, 11120, 11121, 11122, 11123, 11124,
	11125, 11126, 11127, 11128, 11129, 11130, 11131, 11132, 11133, 11134, 11135, 11140,
	11141, 11145, 11152, 11153, 11200, 11201, 11202, 11203, 11204, 11206, 11207, 11300,
	11301, 11302, 11303, 11304, 11305, 11306, 11307, 11308, 11309, 11310, 11311, 11312,
	11313, 11314, 11315, 11316, 11317, 11318, 11319, 11443, 11444, 11445, 11446, 11447,
	11448, 11449, 11450, 11451, 11452, 11453, 11454, 11455, 11456, 11457, 11458, 11459,
	11460, 11461, 11462, 11463, 11464, 11465, 11466, 11467, 11468, 11469, 11470, 11471,
	11472, 11473, 11474, 11475, 11476, 11477, 11478, 11479, 11480, 11481, 11482, 11483,
	11484, 11485, 11486, 11487, 11490, 11491, 11499, 11500, 11519, 11520, 11521, 11522,
	11523, 11524, 11525, 11526, 11527, 11528, 11529, 11530, 11531, 11532, 11533, 11534,
	11535, 11536, 11537, 11538, 11539, 11540, 11541, 11542, 11543, 11544, 11545, 11546,
	11547, 11548, 11549, 11550, 11551, 11590, 11591, 11592, 11593, 11594, 11595, 11596,
	11598, 11599, 11600, 11601, 11602, 11610, 11614, 11615, 11616, 11617, 11618, 11619,
	11635, 11636, 11637, 11638, 11639, 11640, 11641, 11642, 11643, 11644, 11645, 11646,
	11647, 11648, 11649, 11650, 11651, 11652, 11653, 11693, 11694, 11695, 11696, 11701,
	11702, 11703, 11704, 11705, 11706, 11713, 11714, 11732, 11733, 11734, 11735, 11736,
	11737, 11738, 11739, 11740, 11741, 11742, 11743, 11744, 11745, 11746, 11747, 11748,
	11749, 11750, 11751, 11752, 11753, 11754, 11755, 11756, 11757, 11758, 11759, 11760,
	11761, 11762, 11763, 11764, 11765, 11766, 11801, 11802, 11803, 11804, 11805, 11806,
	11807, 11808, 11809, 11810, 11830, 11831, 11832, 11858, 11859, 11860, 11861,11862,
	11863, 11900, 11901, 11902, 11903, 11904, 11905, 11906, 11907, 11910, 11911, 11912,
	11913, 11914, 11915, 11916, 11917, 11918, 11919, 11921, 11922, 11923, 11924, 11925,
	11926, 12402, 12403, 12407, 12408, 12409, 12410, 12413, 12414, 12421, 12422, 12600,
	12617, 12618, 12619, 12620, 12621, 12622, 12623, 12624, 12625, 12626, 12651, 12652,
	12654, 12655, 12656, 12657, 12658, 12659, 12660, 12661, 12800, 12801, 12815, 12816,
	12833, 12834, 12836, 12837, 12845, 12921, 12922, 12923, 12924, 12925, 12926, 12927,
	12928, 12929, 12930, 13001, 13002, 13003, 13005, 13006, 13007, 13008, 13009, 13010,
	13011, 13012, 13013, 13014, 13015, 13435, 13436, 13437, 13438, 13439, 13440, 13441,
	13442, 13443, 13444, 13445, 13446, 13447, 13448, 13449, 13450, 13451, 13452, 13453,
	13454, 13455, 13456, 13457, 13458, 13459, 13460, 13461, 13462, 13463, 13466, 13467,
	13468, 13469, 13470, 13471, 13472, 13473, 13474, 13475, 13476, 13477, 13478, 13479,
	13480, 13700, 13701, 13702, 13703, 13704, 13705, 13709, 13710, 13717, 13718, 13719,
	13720, 13721, 13722, 13723, 13724, 13725, 13726, 13727, 13728, 13729, 13730, 13731,
	13732, 13733, 13734, 13735, 13736, 13737, 13738, 13739, 13740, 13805, 13806, 13807,
	14620, 14621, 14622, 14623, 14624, 14625, 14627, 14628, 14629, 14630, 14631, 14632,
	14633, 14634, 14635, 14636, 14637, 14638, 14639, 14640, 14641, 14642, 14643, 14644,
	14645, 14646, 14647, 14648, 14649, 14650, 14651, 14667, 14669, 14670, 14672, 14673,
	14674, 14675, 14676, 14677, 14679, 14680, 14681, 14682, 14683, 14684, 14685, 14686,
	14687, 14688, 14689, 14690, 14691, 14692, 14693, 14694, 14695, 14696, 14697, 14698,
	14699, 14700, 14701, 15035, 15037, 15038, 15040, 15041, 15042, 15043, 15044, 15045,
	15047, 15048, 15049, 15050, 15051, 15052, 15053, 15054, 15055, 15056, 15057, 15058,
	15059, 15060, 15061, 15062, 15063, 15064, 15065, 15066, 15067, 15321, 15407, 15510,
	15512, 15513, 15514, 15515, 15516, 15517, 15518, 15519, 15520, 15521, 15522, 15523,
	15528, 15529, 15530, 15531, 15532, 15533, 15534, 15535, 15536, 15537, 15538, 15539,
	15544, 15545, 15546, 15547, 15548, 15549, 15550, 15551, 15552, 15553, 15554, 15555,
	15560, 15561, 15562, 15563, 15564, 15565, 15566, 15567, 15568, 15569, 15570, 15571,
	15576, 15577, 15578, 15579, 15580, 15581, 15582, 15583, 15584, 15585, 15586, 15587,
	15592, 15593, 15594, 15595, 15596, 15597, 15598, 15599, 15600, 15601, 15602, 15603,
	15608, 15609, 15610, 15611, 15612, 15613, 15614, 15615, 15616, 15617, 15618, 15619,
	15624, 15625, 15626, 15627, 15628, 15629, 15630, 15631, 15632, 15633, 15634, 15635,
	15999, 16070, 16071, 16072, 16073, 24713, 24714, 24715, 24716, 24717, 24718, 24719,
	24720, 24721, 24722, 24723, 24724, 24731, 24734, 24740, 24741, 24742, 24743, 24752,
	41000,


	/////////////////////////////////////////////////////////// OLD
	//300, 301, 302, 303, 304, 305, 306, 307, 308,
	//310, 312, 313, 314, 315, 316, 317, 318, 319,
	//322, 324, 325, 326, 327, 328, 329,
	//330, 331, 336, 337, 338, 339,
	//340, 341, 342, 343, 344, 348, 349,
	//350, 351, 352, 353, 354, 355,
	//409,
	//410, 411, 412,
	//574, 575, 576, 577, 578, 579,
	//580, 583, 585, 586, 587,
	//593, 594, 595, 597, 599,
	//600, 601, 605, 607,
	//611, 615,
	///*833 to 1039*/
	//833, 834, 835, 836, 837, 838, 839,
	//840, 841, 842, 843, 844, 845, 846, 847, 848, 849,
	//850, 851, 852, 853, 854, 855, 856, 857, 858, 859,
	//860, 861, 862, 863, 864, 865, 866, 867, 868, 869,
	//870, 871, 872, 873, 874, 875, 876, 877, 878, 879,
	//880, 881, 882, 883, 884, 885, 886, 887, 888, 889,
	//890, 891, 892, 893, 894, 895, 896, 897, 898, 899,
	//900, 901, 902, 903, 904, 905, 906, 907, 908, 909,
	//910, 911, 912, 913, 914, 915, 916, 917, 918, 919,
	//920, 921, 922, 923, 924, 925, 926, 927, 928, 929,
	//930, 931, 932, 933, 934, 935, 936, 937, 938, 939,
	//940, 941, 942, 943, 944, 945, 946, 947, 948, 949,
	//950, 951, 952, 953, 954, 955, 956, 957, 958, 959,
	//960, 961, 962, 963, 964, 965, 966, 967, 968, 969,
	//970, 971, 972, 973, 974, 975, 976, 977, 978, 979,
	//980, 981, 982, 983, 984, 985, 986, 987, 988, 989,
	//990, 991, 992, 993, 994, 995, 996, 997, 998, 999,
	//1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009,
	//1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019,
	//1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029,
	//1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039,
	//1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049,
	//1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059,
	//1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069,
	//1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079,
	//1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089,
	//1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099,
	//1100, 1101, 1102, 1103, 1104, 1105, 1106,
	//1115, 1116,
	//1127, 1128, 1129,
	//1141, 1142, 1143, 1144,
	//1157, 1158,
	//1160,
	//1173, 1175,
	//1191, 1192,
	//1205, 1206,
	//1221,
	//1236,
	//1253, 1255,
	//1264, 1266, 1269,
	//1271,
	//1280, 1282, 1285,
	//1294, 1296, 1297,
	//1301, 1304, 1306, 1307, 1308, 1309,
	//1311, 1312, 1313, 1314, 1315, 1316, 1317, 1318, 1319,
	//1320, 1321, 1322, 1323, 1324, 1325, 1326,
	//1332, 1333, 1334,
	//1341, 1342, 1343,
	//1351, 1352,
	//1361, 1367, 1368, 1369,
	//1375, 1376, 1377, 1378,
	//1380, 1381, 1385, 1386, 1387, 1388, 1389,
	//1390, 1391, 1397, 1398, 1399,
	//1406, 1407, 1415, 1416,
	//1424, 1425,
	//1432, 1433, 1434,
	//1440, 1441, 1442, 1443, 1446,
	//1450, 1451, 1452, 1453, 1454, 1455, 1456, 1457,
	//1462, 1462, 1463, 1464,
	//1471, 1472, 1473, 1474,
	//1481, 1482,
	//1490, 1491, 1499,
	//1500, 1506, 1507, 1509,
	//1511, 1512, 1513, 1514, 1515, 1516, 1517, 1518, 1519,
	//1520, 1521, 1522, 1523, 1524, 1525, 1526,
	//1530, 1534, 1535,
	//1545, 1546, 1554, 1556, 1557, 1558,
	//1570, 1571,
	//1583, 1584,
	//1596, 1597,
	//1609, 1610,
	//1622,
	//1632, 1633, 1637,
	//1642, 1643, 1644, 1645, 1648, 1649,
	//1650,
	//1660, 1661, 1662, 1663, 1664, 1665, 1666, 1669,
	//1670, 1671, 1672, 1673, 1674, 1675, 1676, //水城圖檔直到1845 太多了之後再補

	//2109, 2111, 2113, 2115, 2116, 2117, 2118, 2119,
	//2121, 2123, 2125, 2127, 2128, 2129,
	//2130, 2131, 2133, 2135, 2137, 2139,
	//2140, 2141, 2142, 2143,
	//2357, 2358, 2359,
	//2360, 2361, 2362, 2363, 2364,
	//3100, 3101, 3102, 3103, 3104, 3105, 3106, 3107, 3108, 3109,
	//3110, 3111, 3112, 3113, 3114, 3115, 3116, 3117, 3118, 3119,
	//3120, 3121, 3122, 3123, 3124, 3125, 3126, 3127, 3128, 3129,
	//3130, 3131, 3132, 3133, 3134, 3135, 3136,
	//4020, 4021, 4022, 4023, 4024, 4025, 4026, 4027, 4028, 4029,
	//4030, 4031, 4032, 4033, 4034, 4035, 4036, 4037, 4039,
	//4041, 4043, 4044, 4045, 4046, 4047, 4049,
	//4051, 4053, 4055, 4056, 4057, 4058, 4059,
	//4061, 4063, 4065, 4067, 4068, 4069,
	//4070, 4071,
	//4220, 4221, 4222, 4223,
	//4237, 4239,
	//4241, 4243, 4244, 4245, 4246, 4247, 4249,
	//4251, 4253, 4255, 4256, 4257, 4258, 4259,
	//4261, 4263, 4265, 4267, 4268, 4269,
	//4270, 4271,
	//4320, 4321, 4322, 4323, 4324, 4325, 4326, 4327, 4328, 4329,
	//4330, 4331, 4332, 4333, 4334, 4335, 4337, 4339,
	//4341, 4343, 4344, 4345, 4346, 4347, 4349,
	//4351, 4353, 4355, 4356, 4357, 4358, 4359,
	//4361, 4363, 4365, 4367, 4368, 4369,
	//4370, 4371,
	//4420, 4421, 4422, 4423, 4424, 4425, 4426, 4427, 4428, 4429,
	//4430, 4431, 4432, 4433, 4434, 4435, 4436, 4437, 4439,
	//4441, 4443, 4444, 4445, 4446, 4447, 4449,
	//4451, 4453, 4455, 4456, 4457, 4458, 4459,
	//4461, 4463, 4465, 4467, 4468, 4469,
	//4470, 4471,
	//6065,
	//6077,
	//6086, 6087, 6088, 6089,
	//6098, 6099,
	//6100, 6101,
	//6110, 6111, 6112, 6113,
	//6122, 6123, 6124, 6125,
	//6685, 6687, 6689,
	//6691, 6692, 6693, 6694, 6695, 6697, 6699,
	//6701, 6703, 6704, 6705, 6706, 6707, 6709,
	//6711, 6713, 6715, 6716, 6717, 6718, 6719,
	//6721, 6723, 6725, 6727, 6728, 6729,
	//6730, 6731, 6733, 6735, 6737, 6739,
	//6740, 6741, 6742, 6743, 6745, 6747, 6749,
	//6751, 6752, 6753, 6754, 6755,
	//8764, 8765, 8766,

	//14615, 14617, 14618,
	//14620, 14621, 14622, 14623, 14624, 14625, 14627, 14628, 14629,
	//14630, 14631, 14632, 14633, 14634, 14635, 14636, 14637, 14638, 14639,
	//14640, 14641, 14642, 14643, 14644, 14645, 14646, 14647, 14648, 14649,
	//14650, 14651,
	//14667, 14669, 14670, 14672, 14673, 14674, 14675, 14676, 14677, 14679,
	//15035, 15037, 15038,
	//15040, 15041, 15042, 15043, 15044, 15045, 15047, 15048, 15049,
	//15407,
	//15420, 15421, 15422, 15423, 15424, 15425, 15426, 15427
};

//可通行 地面 或 物件
static const QSet<uint16_t> ROAD = {
	//卡魯他那
	4,
	//火山道場地板
	52,
	//橋
	9420, 9423,
	10700, 10701, 10702, 10703, 10704, 10705, 10706, 10707, 10708, 10709, 10710, 10720,
	10711, 10712, 10713, 10714, 10715, 10716, 10717, 10718, 10719, 10720, 10721,10722, 10723,
	14000, 14001, 14002, 14003, 14004, 14005, 14006, 14007, 14008, 14009,
	14010, 14011, 14012, 14013, 14014, 14015, 14016, 14017, 14018, 14019,
	14020, 14021, 14022, 14023, 14024, 14025, 14026, 14027, 14028, 14029,
	14030, 14031,

	//椅子
	12807, 12808, 12809, 12810, 12811, 12812,
};

//2號物 或 空區
static const QSet<uint16_t> EMPTY = {
	2,
};

//超過 1 * 1 的大型障礙物件
static const QHash<int, QSet<quint32>> ROCKEX = {
	{
		2 * 1000 + 2,
		QSet<quint32>{
			10007, 10014, 10048, 10049, 10050, 10119, 10141, 10220, 10560, 10561, 10563,
			10564, 10566, 10567, 10671, 10939, 10964, 10965, 10966, 10972, 10976, 10978,
			10979, 11136, 11137, 11138, 11144, 11148, 11150, 11151, 11208, 11488, 11489,
			11492, 11501, 11505, 11571, 11572, 11573, 11574, 11575, 11576, 11577, 11578,
			11579, 11580, 11581, 11582, 11583, 11584, 11585, 11586, 11587, 11588, 11589,
			11597, 11606, 11611, 11612, 11624, 11668, 11669, 11670, 11671, 11672, 11673,
			11674, 11675, 11676, 11677, 11678, 11679, 11680, 11681, 11682, 11683, 11684,
			11685, 11686, 11687, 11688, 11689, 11690, 11691, 11697, 11698, 11699, 11710,
			11722, 11786, 11787, 11788, 11789, 11790, 11791, 11792, 11793, 11794, 11795,
			11796, 11797, 11798, 11799, 11800, 11811, 11820, 11821, 11840, 11841, 11842,
			11843, 11844, 11845, 11846, 11847, 11848, 11849, 11870, 11871, 11872, 11873,
			11909, 12002, 12010, 12019, 12038, 12041, 12048, 12049, 12650, 12670, 12672,
			12673, 12674, 12675, 12688, 12689, 12690, 12691, 12692, 12693, 12817, 12838,
			12908, 13004, 13708, 13804, 15322, 15323, 15422, 15423, 15508, 15509, 15511,
			15524, 15525, 15526, 15527, 15540, 15541, 15542, 15543, 15556, 15557, 15558,
			15559, 15572, 15573, 15574, 15575, 15588, 15589, 15590, 15591, 15604, 15605,
			15606, 15607, 15620, 15621, 15622, 15623, 15723, 24726, 24727, 24729, 24730,
			24744, 24745, 24748, 24749, 24751, 24755, 24756,
		}
	},

	{
		3 * 1000 + 3,
		QSet<quint32>{
			10010, 10011, 10056, 10057, 10058, 10059, 10143, 10405, 10624, 10877, 10878,
			10879, 10880, 10881, 10882, 10883, 10884, 10885, 10886, 10887, 10888, 10889,
			10890, 10891, 10892, 10970, 10971, 10974, 10984, 10985, 10989, 11142, 11143,
			11146, 11400, 11401, 11402, 11403, 11404, 11405, 11406, 11407, 11408, 11409,
			11410, 11411, 11412, 11413, 11414, 11415, 11416, 11417, 11418, 11419, 11504,
			11514, 11516, 11604, 11620, 11633, 11707, 11718, 11729, 11851, 11852, 11853,
			12005, 12653, 12909, 12910, 12911, 12912, 13000, 13388, 13389, 13390, 13391,
			13392, 13393, 13394, 13395, 13396, 13397, 13398, 13399, 13400, 13401, 13402,
			13403, 13404, 13405, 13406, 13407, 13408, 13409, 13410, 13411, 13412, 13413,
			13414, 13415, 13416, 13417, 13418, 13419, 13420, 13421, 13422, 13423, 13424,
			13425, 13426, 13427, 13481, 13482, 13483, 13484, 13485, 13486, 13487, 13488,
			13489, 13490, 13491, 13492, 13493, 13494, 13495, 13496, 13497, 13498, 13499,
			13500, 13501, 13502, 13503, 13504, 13505, 13506, 13507, 13508, 13509, 13510,
			13511, 13512, 13513, 15000, 15002, 15003, 15004, 15005, 15006, 15008, 15009,
			15010, 15011, 15100, 15102, 15103, 15104, 15105, 15106, 15108, 15109, 15110,
			15111, 15150, 15152, 15153, 15154, 15155, 15156, 15158, 15159, 15160, 15161,
			15200, 15202, 15203, 15204, 15205, 15206, 15208, 15209, 15210, 15211, 15300,
			15302, 15303, 15304, 15305, 15306, 15308, 15309, 15310, 15311, 15424, 15425,
			15428, 15429, 15430, 15431, 15432, 15433, 15434, 15435, 15436, 15437, 15438,
			15439, 15440, 15441, 15442, 15443, 15448, 15449, 15450, 15451, 15452, 15453,
			15454, 15455, 15456, 15457, 15458, 15459, 15460, 15461, 15462, 15463, 15468,
			15469, 15470, 15471, 15472, 15473, 15474, 15475, 15476, 15477, 15478, 15479,
			15480, 15481, 15482, 15483, 15488, 15489, 15490, 15491, 15492, 15493, 15494,
			15495, 15496, 15497, 15498, 15499, 15500, 15501, 15502, 15503, 15680, 15681,
			15682, 15684, 24736, 24737, 24738, 24739, 24750, 24757, 24758,
		}
	},

	{
		4 * 1000 + 4,
		QSet<quint32>{
			10065, 10066, 10067, 10068, 10094, 10542, 10600, 10601, 10783, 10893, 10932,
			11205, 11908, 13711, 15688, 15690, 15691, 15700, 15701, 15703, 15704, 15705,
			15707, 15708, 15709, 15710, 15711, 15712, 15713, 15714, 15715, 15727, 24759,
			24762,
		}
	},

	{
		5 * 1000 + 5,
		QSet<quint32>{
			10000, 10001, 10018, 10034, 10035, 10036, 10037, 10038, 10144, 10146, 10151,
			10157, 10158, 10159, 10210, 10211, 10212, 10213, 10217, 10218, 10623, 10784,
			10846, 10895, 10924, 12900, 12901, 12902, 12903, 15320,
		}
	},

	{
		6 * 1000 + 6,
		QSet<quint32>{
			10008, 10009, 10043, 10045, 10100, 10101, 10102, 10103, 10104, 10105, 10106,
			10107, 10108, 10109, 10111, 10113, 10115, 10139, 10145, 10148, 10166, 10179,
			10228, 10300, 10502, 10503, 10504, 10505, 10511, 10521, 10541, 10766, 10769,
			10770, 10836, 10838, 10844, 10847,
		}
	},

	{
		7 * 1000 + 7,
		QSet<quint32>{
			10227, 10510, 10514, 10515, 10523, 10835, 10848,
		}
	},

	{
		8 * 1000 + 8,
		QSet<quint32>{
			10537,
		}
	},

	{
		9 * 1000 + 9,
		QSet<quint32>{
			10231, 10232,
		}
	},

	{
		10 * 1000 + 10,
		QSet<quint32>{
			10233, 10869, 15402, 15403,
		}
	},

	{
		13 * 1000 + 13,
		QSet<quint32>{
			10534,
		}
	},

	{
		15 * 1000 + 15,
		QSet<quint32>{
			10237,
		}
	},

	{
		16 * 1000 + 16,
		QSet<quint32>{
			10225,
		}
	},

	{
		1 * 1000 + 2,
		QSet<quint32>{
			10118, 10128, 10129, 10152, 10201, 10214, 10310, 10314, 10629, 10631, 10674,
			10678, 10808, 10809, 10820, 10821, 10930, 10936, 10937, 11497, 11498, 11552,
			11553, 11554, 11555, 11556, 11557, 11558, 11559, 11560, 11561, 11562, 11563,
			11564, 11565, 11566, 11567, 11568, 11569, 11570, 11605, 11607, 11654, 11655,
			11656, 11657, 11658, 11659, 11660, 11661, 11662, 11663, 11664, 11711, 11712,
			11767, 11768, 11769, 11770, 11771, 11772, 11773, 11774, 11775, 11776, 11777,
			11778, 11779, 11780, 11781, 11782, 11833, 11834, 11835, 11836, 11837, 11838,
			11864, 11865, 11866, 11867, 11868, 12000, 12003, 12004, 12006, 12015, 12016,
			12017, 12018, 12020, 12021, 12026, 12027, 12028, 12029, 12030, 12031, 12040,
			12042, 12043, 12044, 12050, 12051, 12052, 12053, 12054, 12055, 12056, 12064,
			12065, 12066, 12813, 12832, 12835, 12841, 12842, 12846, 14702, 14704, 14706,
			14707, 14709, 15016, 15116, 15166, 15216, 15316, 15484, 15485, 15486, 15487,
			15639,
		}
	},

	{
		1 * 1000 + 3,
		QSet<quint32>{
			10022, 10025, 10123, 10126, 10170, 10175, 10176, 10902, 11507, 11511, 11630,
			11721, 11728, 11818, 11819, 11839, 11869, 12400, 12849, 12850, 13713, 13716,
			14705, 14708, 15018, 15118, 15168, 15218, 15318, 15444, 15445, 15446, 15447,
			15464, 15465, 15466, 15467, 15404, 15405, 15406, 15407, 15725,
		}
	},

	{
		1 * 1000 + 4,
		QSet<quint32>{
			10901, 10927, 12411, 12412, 12419, 12420,
		}
	},

	{
		1 * 1000 + 5,
		QSet<quint32>{
			15726,
		}
	},

	{
		1 * 1000 + 8,
		QSet<quint32>{
			10198,
		}
	},

	{
		1 * 1000 + 11,
		QSet<quint32>{
			11814, 11817,
		}
	},

	{
		2 * 1000 + 1,
		QSet<quint32>{
			10017, 10092, 10093, 10121, 10185, 10192, 10628, 10630, 10633, 10675, 10813,
			10814, 10925, 10938, 10967, 10977, 11139, 11149, 11493, 11494, 11495, 11496,
			11506, 11567, 11608, 11609, 11613, 11622, 11665, 11666, 11667, 11700, 11715,
			11716, 11717, 11720, 11783, 11784, 11785, 12001, 12007, 12008, 12009, 12011,
			12012, 12013, 12014, 12022, 12022, 12032, 12033, 12034, 12035, 12036, 12037,
			12039, 12045, 12046, 12047, 12057, 12058, 12059, 12060, 12061, 12062, 12063,
			12067, 12068, 12069, 12671, 12814, 12839, 12843, 12844, 13707, 14703, 14710,
			14712, 14713, 14715, 15019, 15119, 15169, 15219, 15319, 15638, 24732, 24733,
		}
	},

	{
		2 * 1000 + 3,
		QSet<quint32>{
			10125, 10184, 10622, 10636, 10915, 11503, 11513, 11518, 11603, 11623, 11628,
			11632, 11708, 11726, 11730, 11850, 11874, 12603, 12605, 12608, 12610, 12611,
			12612, 12616, 12663, 12665, 12676, 12677, 12678, 12679, 12684, 12685, 12818,
			12819, 12820, 12821, 12828, 12830, 12831, 12840, 12917, 12918, 12919, 12920,
			13712, 14716, 14718, 14720, 15007, 15012, 15013, 15107, 15112, 15113, 15157,
			15162, 15163, 15207, 15212, 15213, 15307, 15312, 15313, 15426, 15696, 15698,
			24725, 24746, 24747,
		}
	},

	{
		2 * 1000 + 4,
		QSet<quint32>{
			10202, 10661, 10662, 10664, 10870, 11512, 11625, 11629, 11727, 11875, 12416,
			13802, 13803, 15716, 15718, 15722,
		}
	},

	{
		2 * 1000 + 5,
		QSet<quint32>{
			10041, 10607, 15732,
		}
	},

	{
		2 * 1000 + 8,
		QSet<quint32>{
			10992,
		}
	},

	{
		2 * 1000 + 9,
		QSet<quint32>{
			10986, 10990, 10993,
		}
	},

	{
		2 * 1000 + 10,
		QSet<quint32>{
			14410,
		}
	},

	{
		2 * 1000 + 15,
		QSet<quint32>{
			10991,
		}
	},

	{
		3 * 1000 + 1,
		QSet<quint32>{
			10023, 10024, 10127, 10177, 10188, 11509, 11631, 11724, 11812, 11813, 11816, 12401,
			12847, 12848, 13714, 13715, 14711, 14714, 15017, 15167, 15217, 15317, 15721,
			24728, 24735,
		}
	},

	{
		3 * 1000 + 2,
		QSet<quint32>{
			10116, 10117, 10142, 10187, 10196, 10203, 10562, 10565, 10621, 10635, 10787,
			10788, 10913, 10926, 10975, 11147, 11502, 11508, 11510, 11626, 11627, 11709,
			11723, 11725, 12404, 12601, 12602, 12604, 12606, 12607, 12609, 12613, 12614,
			12615, 12662, 12664, 12680, 12681, 12682, 12683, 12686, 12687, 12822, 12823,
			12824, 12825, 12826, 13706, 14717, 14719, 14721, 15001, 15014, 15015, 15101,
			15114, 15115, 15117, 15151, 15164, 15165, 15201, 15214, 15215, 15301, 15314,
			15315, 15427, 15697, 15699,
		}
	},

	{
	3 * 1000 + 4,
	QSet<quint32>{
			10013, 10040, 10122, 10182, 10605, 10637, 10669, 10775, 10780, 10781, 10782,
			10785, 10894, 10914, 10982, 10983, 10988, 12905, 12906, 12907, 12913, 12914,
			12915, 12916, 15683, 15687, 15692, 15693, 15702, 24753,
		}
	},

	{
	3 * 1000 + 5,
	QSet<quint32>{
			10608, 10609, 10620, 10917, 10919, 10941,
	}
	},

	{
		3 * 1000 + 6,
		QSet<quint32>{
			10603, 10604, 10931,
		}
	},

	{
		3 * 1000 + 7,
		QSet<quint32>{
			10183,
		}
	},

	{
		3 * 1000 + 8,
		QSet<quint32>{
			10304, 10305, 10308,
		}
	},

	{
		3 * 1000 + 9,
		QSet<quint32>{
			10180,
		}
	},

	{
		4 * 1000 + 1,
		QSet<quint32>{
			10012, 10097, 10171, 10199, 10306, 10900, 10928, 12405, 12406, 12417, 12418,
		}
	},

	{
		4 * 1000 + 2,
		QSet<quint32>{
			10016, 10186, 10660, 10663, 10665, 11854, 12415, 13800, 13801, 15717, 15719,
			15724,
		}
	},

	{
	4 * 1000 + 3,
	QSet<quint32>{
			10219, 10638, 10668, 10776, 10779, 10786, 10916, 11515, 11517, 11621, 11634,
			11719, 11731, 11855, 11856, 15420, 15421, 15685, 15694, 15706, 24754, 24760,
		}
	},

	{
	4 * 1000 + 5,
	QSet<quint32>{
			10865, 15686, 15689,
	}
	},

	{
		4 * 1000 + 6,
		QSet<quint32>{
			10181, 10933,
		}
	},

	{
		4 * 1000 + 7,
		QSet<quint32>{
			10771,
		}
	},

	{
		4 * 1000 + 8,
		QSet<quint32>{
			10768,
		}
	},

	{
		5 * 1000 + 1,
		QSet<quint32>{
			10124, 15720,
		}
	},

	{
		5 * 1000 + 2,
		QSet<quint32>{
			10165, 10197, 10606, 15731,
		}
	},

	{
		5 * 1000 + 3,
		QSet<quint32>{
			10167, 10602, 10918, 11857, 15695,
		}
	},

	{
		5 * 1000 + 4,
		QSet<quint32>{
			10673, 10791, 15729, 15730, 24761,
		}
	},

	{
		5 * 1000 + 6,
		QSet<quint32>{
			10032, 10039, 10051, 10512, 10520, 10765, 15728,
		}
	},

	{
		5 * 1000 + 7,
		QSet<quint32>{
			 10138, 10764, 10773,
		}
	},

	{
		5 * 1000 + 8,
		QSet<quint32>{
			10500, 10867,
		}
	},

	{
		5 * 1000 + 9,
		QSet<quint32>{
			10164,
		}
	},

	{
		6 * 1000 + 1,
		QSet<quint32>{
			10015,
		}
	},

	{
		6 * 1000 + 5,
		QSet<quint32>{
			10033, 10147, 10149, 10174, 10522, 10767, 10772, 10843, 10845,
		}
	},

	{
		6 * 1000 + 7,
		QSet<quint32>{
			10042, 10046, 10110, 10112, 10114, 10150, 10216, 10229, 10513, 10524, 10839,
			10841,
		}
	},

	{
		6 * 1000 + 9,
		QSet<quint32>{
			10160, 10163, 15400,
		}
	},

	{
		6 * 1000 + 16,
		QSet<quint32>{
			10234,
		}
	},

	{
		7 * 1000 + 4,
		QSet<quint32>{
			10777,
		}
	},

	{
		7 * 1000 + 5,
		QSet<quint32>{
			10763, 10833, 10868, 10929,
		}
	},

	{
		7 * 1000 + 6,
		QSet<quint32>{
			10226, 10525, 10842, 10861,
		}
	},

	{
		7 * 1000 + 8,
		QSet<quint32>{
			10239, 10536, 10539, 10834, 10837, 10840,
		}
	},

	{
		7 * 1000 + 10,
		QSet<quint32>{
			10230,
		}
	},

	{
		7 * 1000 + 17,
		QSet<quint32>{
			10236,
		}
	},

	{
		8 * 1000 + 2,
		QSet<quint32>{
			10862,
		}
	},

	{
		8 * 1000 + 3,
		QSet<quint32>{
			10064, 10307,
		}
	},

	{
		8 * 1000 + 4,
		QSet<quint32>{
			10863,
		}
	},

	{
		8 * 1000 + 5,
		QSet<quint32>{
			10140, 10501, 10871, 10876,
		}
	},

	{
		8 * 1000 + 6,
		QSet<quint32>{
			10866, 10872, 10873,
		}
	},

	{
		8 * 1000 + 7,
		QSet<quint32>{
			10044, 10532, 10533, 10538, 10874,
		}
	},

	{
		9 * 1000 + 3,
		QSet<quint32>{
			10301, 10302, 10303, 10987, 10994, 10995,
		}
	},

	{
		9 * 1000 + 5,
		QSet<quint32>{
			10864,
		}
	},

	{
		9 * 1000 + 6,
		QSet<quint32>{
			15401,
		}
	},

	{
		9 * 1000 + 7,
		QSet<quint32>{
			10762,
		}
	},

	{
		9 * 1000 + 8,
		QSet<quint32>{
			10235,
		}
	},

	{
		9 * 1000 + 11,
		QSet<quint32>{
			10238,
		}
	},

	{
		10 * 1000 + 8,
		QSet<quint32>{
			10530,
		}
	},

	{
		10 * 1000 + 9,
		QSet<quint32>{
			10778, 10875,
		}
	},

	{
		10 * 1000 + 11,
		QSet<quint32>{
			10531, 10535,
		}
	},

	{
		10 * 1000 + 13,
		QSet<quint32>{
			15404,
		}
	},

	{
		13 * 1000 + 6,
		QSet<quint32>{
			11815,
		}
	},

	{
		14 * 1000 + 10,
		QSet<quint32>{
			10528,
		}
	},

	{
		14 * 1000 + 11,
		QSet<quint32>{
			10529,
		}
	},
};

// 大石頭或大型障礙物編號
static const QSet<QPair<QPair<int, int>, QSet<quint32>>> ROCKEX_SET = {
	{ QPair<int, int>{ 2, 2 },   ROCKEX.value(2 * 1000 + 2) }, // 2 * 2
	{ QPair<int, int>{ 3, 3 },   ROCKEX.value(3 * 1000 + 3) }, // 3 * 3
	{ QPair<int, int>{ 4, 4 },   ROCKEX.value(4 * 1000 + 4) }, // 3 * 2
	{ QPair<int, int>{ 5, 5 },   ROCKEX.value(5 * 1000 + 5) }, // 3 * 3
	{ QPair<int, int>{ 6, 6 },   ROCKEX.value(6 * 1000 + 6) }, // 2 * 2
	{ QPair<int, int>{ 7, 7 },   ROCKEX.value(7 * 1000 + 7) }, // 3 * 2
	{ QPair<int, int>{ 8, 8 },   ROCKEX.value(8 * 1000 + 8) }, // 3 * 3
	{ QPair<int, int>{ 9, 9 },   ROCKEX.value(9 * 1000 + 9) }, // 2 * 2
	{ QPair<int, int>{ 10, 10 }, ROCKEX.value(10 * 1000 + 10) }, // 3 * 2
	{ QPair<int, int>{ 13, 13 }, ROCKEX.value(13 * 1000 + 13) }, // 3 * 3
	{ QPair<int, int>{ 15, 15 }, ROCKEX.value(15 * 1000 + 15) }, // 2 * 2
	{ QPair<int, int>{ 16, 16 }, ROCKEX.value(16 * 1000 + 16) }, // 3 * 2

	{ QPair<int, int>{ 1, 2 },   ROCKEX.value(1 * 1000 + 2) }, // 3 * 3
	{ QPair<int, int>{ 1, 3 },   ROCKEX.value(1 * 1000 + 3) }, // 2 * 2
	{ QPair<int, int>{ 1, 4 },   ROCKEX.value(1 * 1000 + 4) }, // 3 * 2
	{ QPair<int, int>{ 1, 5 },   ROCKEX.value(1 * 1000 + 5) }, // 3 * 3
	{ QPair<int, int>{ 1, 8 },   ROCKEX.value(1 * 1000 + 8) }, // 2 * 2
	{ QPair<int, int>{ 1, 11 },  ROCKEX.value(1 * 1000 + 11) }, // 3 * 2

	{ QPair<int, int>{ 2, 1 },   ROCKEX.value(2 * 1000 + 1) }, // 3 * 3
	{ QPair<int, int>{ 2, 3 },   ROCKEX.value(2 * 1000 + 3) }, // 2 * 2
	{ QPair<int, int>{ 2, 4 },   ROCKEX.value(2 * 1000 + 4) }, // 3 * 2
	{ QPair<int, int>{ 2, 5 },   ROCKEX.value(2 * 1000 + 5) }, // 3 * 3
	{ QPair<int, int>{ 2, 8 },   ROCKEX.value(2 * 1000 + 8) }, // 2 * 2
	{ QPair<int, int>{ 2, 9 },   ROCKEX.value(2 * 1000 + 9) }, // 3 * 2
	{ QPair<int, int>{ 2, 10 },  ROCKEX.value(2 * 1000 + 10) }, // 3 * 3
	{ QPair<int, int>{ 2, 15 },  ROCKEX.value(2 * 1000 + 15) }, // 2 * 2

	{ QPair<int, int>{ 3, 1 },  ROCKEX.value(3 * 1000 + 1) }, // 3 * 2
	{ QPair<int, int>{ 3, 2 },  ROCKEX.value(3 * 1000 + 2) }, // 3 * 3
	{ QPair<int, int>{ 3, 4 },  ROCKEX.value(3 * 1000 + 4) }, // 2 * 2
	{ QPair<int, int>{ 3, 5 },  ROCKEX.value(3 * 1000 + 5) }, // 3 * 2
	{ QPair<int, int>{ 3, 6 },  ROCKEX.value(3 * 1000 + 6) }, // 3 * 3
	{ QPair<int, int>{ 3, 7 },  ROCKEX.value(3 * 1000 + 7) }, // 3 * 3
	{ QPair<int, int>{ 3, 8 },  ROCKEX.value(3 * 1000 + 8) }, // 2 * 2
	{ QPair<int, int>{ 3, 9 },  ROCKEX.value(3 * 1000 + 9) }, // 3 * 2

	{ QPair<int, int>{ 4, 1 },  ROCKEX.value(4 * 1000 + 1) }, // 3 * 3
	{ QPair<int, int>{ 4, 2 },  ROCKEX.value(4 * 1000 + 2) }, // 2 * 2
	{ QPair<int, int>{ 4, 3 },  ROCKEX.value(4 * 1000 + 3) }, // 3 * 2
	{ QPair<int, int>{ 4, 5 },  ROCKEX.value(4 * 1000 + 5) }, // 3 * 3
	{ QPair<int, int>{ 4, 6 },  ROCKEX.value(4 * 1000 + 6) }, // 2 * 2
	{ QPair<int, int>{ 4, 7 },  ROCKEX.value(4 * 1000 + 7) }, // 3 * 2
	{ QPair<int, int>{ 4, 8 },  ROCKEX.value(4 * 1000 + 8) }, // 3 * 3

	{ QPair<int, int>{ 5, 1 },  ROCKEX.value(5 * 1000 + 1) }, // 2 * 2
	{ QPair<int, int>{ 5, 2 },  ROCKEX.value(5 * 1000 + 2) }, // 3 * 2
	{ QPair<int, int>{ 5, 3 },  ROCKEX.value(5 * 1000 + 3) }, // 3 * 3
	{ QPair<int, int>{ 5, 4 },  ROCKEX.value(5 * 1000 + 4) }, // 3 * 3
	{ QPair<int, int>{ 5, 6 },  ROCKEX.value(5 * 1000 + 6) }, // 2 * 2
	{ QPair<int, int>{ 5, 7 },  ROCKEX.value(5 * 1000 + 7) }, // 3 * 2
	{ QPair<int, int>{ 5, 8 },  ROCKEX.value(5 * 1000 + 8) }, // 3 * 3
	{ QPair<int, int>{ 5, 9 },  ROCKEX.value(5 * 1000 + 9) }, // 2 * 2

	{ QPair<int, int>{ 6, 1 },  ROCKEX.value(6 * 1000 + 1) }, // 3 * 3
	{ QPair<int, int>{ 6, 5 },  ROCKEX.value(6 * 1000 + 5) }, // 2 * 2
	{ QPair<int, int>{ 6, 7 },  ROCKEX.value(6 * 1000 + 7) }, // 3 * 2
	{ QPair<int, int>{ 6, 9 },  ROCKEX.value(6 * 1000 + 9) }, // 3 * 3
	{ QPair<int, int>{ 6, 16 }, ROCKEX.value(6 * 1000 + 16) }, // 3 * 3

	{ QPair<int, int>{ 7, 4 },  ROCKEX.value(7 * 1000 + 4) }, // 2 * 2
	{ QPair<int, int>{ 7, 5 },  ROCKEX.value(7 * 1000 + 5) }, // 3 * 2
	{ QPair<int, int>{ 7, 6 },  ROCKEX.value(7 * 1000 + 6) }, // 3 * 3
	{ QPair<int, int>{ 7, 8 },  ROCKEX.value(7 * 1000 + 8) }, // 2 * 2
	{ QPair<int, int>{ 7, 10 }, ROCKEX.value(7 * 1000 + 10) }, // 3 * 2
	{ QPair<int, int>{ 7, 17 }, ROCKEX.value(7 * 1000 + 17) }, // 3 * 3

	{ QPair<int, int>{ 8, 2 },  ROCKEX.value(8 * 1000 + 2) }, // 3 * 3
	{ QPair<int, int>{ 8, 3 },  ROCKEX.value(8 * 1000 + 3) }, // 2 * 2
	{ QPair<int, int>{ 8, 4 },  ROCKEX.value(8 * 1000 + 4) }, // 3 * 2
	{ QPair<int, int>{ 8, 5 },  ROCKEX.value(8 * 1000 + 5) }, // 3 * 3
	{ QPair<int, int>{ 8, 6 },  ROCKEX.value(8 * 1000 + 6) }, // 2 * 2
	{ QPair<int, int>{ 8, 7 },  ROCKEX.value(8 * 1000 + 7) }, // 3 * 2

	{ QPair<int, int>{ 9, 3 },  ROCKEX.value(9 * 1000 + 3) }, // 3 * 3
	{ QPair<int, int>{ 9, 5 },  ROCKEX.value(9 * 1000 + 5) }, // 2 * 2
	{ QPair<int, int>{ 9, 6 },  ROCKEX.value(9 * 1000 + 6) }, // 3 * 2
	{ QPair<int, int>{ 9, 7 },  ROCKEX.value(9 * 1000 + 7) }, // 3 * 3
	{ QPair<int, int>{ 9, 8 },  ROCKEX.value(9 * 1000 + 8) }, // 3 * 3
	{ QPair<int, int>{ 9, 11 }, ROCKEX.value(9 * 1000 + 11) }, // 2 * 2

	{ QPair<int, int>{ 10, 8 },  ROCKEX.value(10 * 1000 + 8) }, // 3 * 2
	{ QPair<int, int>{ 10, 9 },  ROCKEX.value(10 * 1000 + 9) }, // 3 * 3
	{ QPair<int, int>{ 10, 11 }, ROCKEX.value(10 * 1000 + 11) }, // 3 * 2
	{ QPair<int, int>{ 10, 13 }, ROCKEX.value(10 * 1000 + 13) }, // 3 * 3

	{ QPair<int, int>{ 13, 6 },  ROCKEX.value(13 * 1000 + 6) }, // 3 * 2

	{ QPair<int, int>{ 14, 10 }, ROCKEX.value(14 * 1000 + 10) }, // 3 * 3
	{ QPair<int, int>{ 14, 11 }, ROCKEX.value(14 * 1000 + 11) }, // 3 * 2
};

#pragma endregion

//檢查地圖大小是否合法
inline constexpr bool __fastcall CHECKSIZE(int w, int h)
{
	if (w < 0 || h < 0 || w > 1500 || h > 1500)
		return false;
	else
		return true;
}

//找大石頭(占用坐標超過1格)並設置標記
void __fastcall checkAndSetRockEx(map_t& map, const QPoint& p, quint32 sObject)
{
	//    X = 12220 || 12222 為起點往右上畫6格長方形
	// 
	//     * *       x,y-2  x+1,y-2
	//     * *       x,y-1  x+1,y-1
	//     X *       x,y    x+1,y
	//
	int x = 0, y = 0;
	for (const QPair<QPair<int, int>, QSet<quint32>>& it : ROCKEX_SET)
	{
		const QSet<quint32> set = it.second;
		if (!set.size() || !set.contains(sObject))
			continue;
		int max_y = it.first.second;
		int max_x = it.first.first;
		for (y = 0; y < max_y; ++y)
		{
			for (x = 0; x < max_x; ++x)
			{
				const QPoint point(p.x() + x, p.y() - y);
				map.data.insert(point, util::OBJ_ROCKEX);
			}
		}
	}
};

//重複檢查大石頭
void __fastcall reCheckAndRockEx(map_t& map, const QPoint& point, quint32 sObject)
{
	for (const QPair<QPair<int, int>, QSet<quint32>>& it : ROCKEX_SET)
	{
		const QSet<quint32> set = it.second;
		if (!set.size() || !set.contains(sObject))
			continue;
		map.data.insert(point, util::OBJ_ROCKEX);
		return;
	}
};

//用於從映射到內存的數據中取出特定的數據塊
std::vector<unsigned short> load(const UCHAR* pFileMap, int sectionOffset, int offest)
{
	std::vector<unsigned short> v = {};
	do
	{
		if (!pFileMap)
		{
			break;
		}

		int size = sizeof(mapheader_t) + (sectionOffset * offest);
		const UCHAR* p = pFileMap + size;
		for (size_t i = 0u; i < static_cast<size_t>(sectionOffset); i += 2u)
		{
			v.push_back(*reinterpret_cast<const unsigned short*>(p + i));
		}
	} while (false);
	return v;
}

//用於距離排序找到最近的坐標
bool compareDistance(qdistance_t& a, qdistance_t& b)
{
	return (a.distance < b.distance);
}

MapAnalyzer::MapAnalyzer()
	:directory(QString::fromUtf8(qgetenv("GAME_DIR_PATH")))
{
}

MapAnalyzer::~MapAnalyzer()
{
	qDebug() << "MapAnalyzer distory!!";
}

//查找地形
util::ObjectType __fastcall MapAnalyzer::getGroundType(const uint16_t data) const
{
	if (UP.contains(data))
		return util::OBJ_UP;

	if (DOWN.contains(data))
		return util::OBJ_DOWN;

	if (JUMP.contains(data))
		return util::OBJ_JUMP;

	if (ROAD.contains(data))
		return util::OBJ_ROAD;

	if (WATER.contains(data))
		return util::OBJ_WATER;

	if (GROUND.contains(data))
		return util::OBJ_WALL;

	if (EMPTY.contains(data))
		return util::OBJ_EMPTY;

	return util::OBJ_UNKNOWN;
}

//查找物件
util::ObjectType __fastcall MapAnalyzer::getObjectType(const uint16_t data) const
{
	if (UP.contains(data))
		return util::OBJ_UP;

	if (DOWN.contains(data))
		return util::OBJ_DOWN;

	if (JUMP.contains(data))
		return util::OBJ_JUMP;

	if (ROAD.contains(data))
		return util::OBJ_ROAD;

	if (WATER.contains(data))
		return util::OBJ_WATER;

	if ((WALL.contains(data)))
		return util::OBJ_WALL;

	if (ROCK.contains(data))
		return util::OBJ_ROCK;

	if (EMPTY.contains(data))
		return util::OBJ_EMPTY;

	return util::OBJ_UNKNOWN;
}

bool __fastcall MapAnalyzer::getMapDataByFloor(int floor, map_t* map)
{
	if (maps_.contains(floor))
	{
		*map = maps_.value(floor);
		return true;
	}

	return false;
}

void __fastcall MapAnalyzer::setMapDataByFloor(int floor, const map_t& map)
{
	maps_.insert(floor, map);
}

void __fastcall MapAnalyzer::setPixmapByIndex(int index, const QPixmap& pix)
{
	if (pixMap_.contains(index))
	{
		pixMap_.insert(index, pix);
	}
	else
	{
		pixMap_.insert(index, pix);
	}
}

QString __fastcall MapAnalyzer::getCurrentMapPath(int floor) const
{
	const QString path = directory + "/map/" + QString::number(floor) + kDefaultSuffix;
	return path;
}

bool __fastcall MapAnalyzer::readFromBinary(int floor, const QString& name, bool enableDraw)
{
	if (!floor)
		return false;

	//{directory}/map/{floor}.dat
	const QString path(getCurrentMapPath(floor));

	//check file exist
	util::QScopedFile file(path, QIODevice::ReadOnly);
	if (!file.exists())
	{
		qDebug() << __FUNCTION__ << " @" << __LINE__ << " File not found.";
		return false;
	}

	if (!file.isOpen())
	{
		qDebug() << __FUNCTION__ << " @" << __LINE__ << " Failed to open file.";
		return false;
	}

	uchar* pFileMap = file.map(0, file.size());

	//2個DWORD(4字節)的數據，第1個表示地圖長度 - 東(W)，第2個表示地圖長度 - 南(H)。

	mapheader_t* _header = reinterpret_cast<mapheader_t*>(pFileMap);
	if (!_header)
	{
		qDebug() << __FUNCTION__ << " Failed to map file.";
		return false;
	}

	//獲取地圖寬高
	int width = _header->width;
	int height = _header->height;

	if (!CHECKSIZE(width, height))
	{
		qDebug() << __FUNCTION__ << " Invalid map size.";
		return false;
	}

	map_t map;
	getMapDataByFloor(floor, &map);
	map.floor = floor;
	map.width = width;
	map.height = height;
	map.name = name;

	if (map.data.size() > 0
		&& map.data.size() == (height * width)
		&& !pixMap_.value(floor).isNull()
		&& height == map.height
		&& width == map.width)
	{
		return true;
	}

	auto draw = [this, &map, &enableDraw, floor]()->void
	{
		if (enableDraw && pixMap_.value(floor).isNull())
		{
			//QT列表容器<點> 列表 = 地圖.數據.鍵(點) //取指定地圖數據
			const QList<QPoint> list = map.data.keys();//取指定地圖數據

			//QT圖像類 QImage 圖像(QSize(地圖.寬, 地圖.高), 格式32色帶透明)
			QImage img(QSize(map.width, map.height), QImage::Format_ARGB32);//生成圖像
			img.fill(MAP_COLOR_HASH.value(util::OBJ_EMPTY));//填充背景色

			QPainter painter(&img);//實例繪製引擎
			for (const QPoint& it : list) //遍歷地圖數據
			{
				util::ObjectType typeOriginal = map.data.value(it);
				const QBrush brush(MAP_COLOR_HASH.value(typeOriginal), Qt::SolidPattern); //獲取並設置顏色
				const QPen pen(brush, 1.0, Qt::SolidLine, Qt::RoundCap, Qt::RoundJoin);  //實例畫筆

				painter.setPen(pen); //設置畫筆
				painter.drawPoint(it); //繪製點
			}
			painter.end(); //結束繪製
			setPixmapByIndex(map.floor, QPixmap::fromImage(img));
		}
	};

	if (loadFromBinary(floor, &map))
	{
		draw();
		return true;
	}

	map.data.clear();
	map.stair.clear();
	map.workable.clear();

	int x = 0, y = 0;
	int sectionOffset = width * height * 2;

	//隨後W* H * 2字節為地面數據，每2字節為1數據塊，表示地面的地圖編號，以製成基本地形。
	//再隨後W * H * 2字節為地上物件 / 建築物數據，每2字節為1數據塊，表示該點上的物件 / 建築物地圖編號。
	//再隨後 W * H * 2 字節為地圖標誌，每 2 字節為 1 數據塊，
	QFutureSynchronizer<std::vector<unsigned short>> sync;
	sync.addFuture(QtConcurrent::run(load, pFileMap, sectionOffset, 0));
	sync.addFuture(QtConcurrent::run(load, pFileMap, sectionOffset, 1));
	sync.addFuture(QtConcurrent::run(load, pFileMap, sectionOffset, 2));
	sync.waitForFinished();
	QList<QFuture<std::vector<unsigned short>>> futures = sync.futures();
	const std::vector<unsigned short> bGround = futures[0].result();//load(pFileMap, sectionOffset, 0);
	const std::vector<unsigned short> bObject = futures[1].result();//load(pFileMap, sectionOffset, 1);
	const std::vector<unsigned short> bLabel = futures[2].result();//load(pFileMap, sectionOffset, 2);

	if (bGround.size() != bObject.size() || bGround.size() != bLabel.size())
	{
		qDebug() << "map data error" << bGround.size() << bObject.size() << bLabel.size();
		return false;
	}

	auto read = [width](const std::vector<unsigned short>& ba, const QPoint& p)->unsigned short
	{
		size_t offest = static_cast<size_t>(p.x() + (p.y() * width));
		if (offest < ba.size())
			return ba.at(offest);
		else
			return 0;
	};

	bool bret = false;
	unsigned short sGround = 0, sObject = 0, sLabel = 0;
	util::ObjectType typeGround = util::OBJ_UNKNOWN;
	util::ObjectType typeObject = util::OBJ_UNKNOWN;
	util::ObjectType typeOriginal = util::OBJ_UNKNOWN;
	QPoint point(0, 0);
	for (y = 0; y < height; ++y)
	{
		for (x = 0; x < width; ++x)
		{
			point.setX(x); point.setY(y);

			sGround = read(bGround, point);
			sObject = read(bObject, point);
			sLabel = read(bLabel, point);

			typeGround = getGroundType(sGround);
			typeObject = getObjectType(sObject);

			typeOriginal = map.data.value(point);

			checkAndSetRockEx(map, point, sObject);

			//調試專用
			//if (point.x() == 471 && sObject > 0 && (point.y() >= 298 && point.x() <= 295))
			//{
			//	qDebug() << "";
			//}
			if (point == QPoint(71, 82))
			{
				qDebug() << sObject;
			}

			//排除樓梯或水晶
			if ((util::OBJ_UP == typeOriginal) || (util::OBJ_DOWN == typeOriginal) || (util::OBJ_JUMP == typeOriginal) || (util::OBJ_WARP == typeOriginal) || (util::OBJ_ROCKEX == typeOriginal))
			{
				continue;
			}
			else
				map.data.insert(point, util::OBJ_UNKNOWN);

			if (util::OBJ_ROAD == typeObject || util::OBJ_ROAD == typeGround)
			{
				map.data.insert(point, util::OBJ_ROAD);
				continue;
			}

			//排除水
			if ((util::OBJ_WATER == typeGround))
			{
				map.data.insert(point, util::OBJ_WATER);
				reCheckAndRockEx(map, point, sObject);
				continue;
			}
			//排除牆壁
			else if ((util::OBJ_WALL == typeGround))
			{
				if (typeObject != util::OBJ_ROCK)
					map.data.insert(point, util::OBJ_WALL);
				else
					map.data.insert(point, util::OBJ_ROCK);
				reCheckAndRockEx(map, point, sObject);
				continue;
			}
			//排除石頭
			else if ((util::OBJ_ROCK == typeGround))
			{
				map.data.insert(point, util::OBJ_ROCK);
				reCheckAndRockEx(map, point, sObject);
				continue;
			}
			//排除牆壁
			else if (((6693 == sGround) && (17534 == sObject) && (0xC000 == sLabel)) || (sGround == 0x64))
			{
				if (typeObject != util::OBJ_ROCK)
					map.data.insert(point, util::OBJ_WALL);
				else
					map.data.insert(point, util::OBJ_ROCK);
				reCheckAndRockEx(map, point, sObject);
				continue;
			}
			//排除空白區
			else if (((sGround < 0x64) || (util::OBJ_EMPTY == typeGround)))
			{
				map.data.insert(point, util::OBJ_EMPTY);
				reCheckAndRockEx(map, point, sObject);
				continue;
			}

			//數據塊第 1 字節為 0 或 10，10 表示該坐標能引發場景轉換，否則為 0
			//數據塊第 2 字節為 0、192 或 193，193 表示不能穿越該坐標，反之為 192，0 表示沒地圖。
			if ((0xC003 == sLabel))
			{
				//如果是傳點，但沒有標明是上樓/下樓或水晶，則默認為水晶
				if (((LOBYTE(sLabel) == 3) && (HIBYTE(sLabel) == 192)) && ((typeObject != util::OBJ_JUMP) && (typeObject != util::OBJ_UP) && (typeObject != util::OBJ_DOWN)))
				{
					typeObject = util::OBJ_JUMP;
				}

				if (util::OBJ_ROAD == typeObject)
					map.workable.insert(point);
				else
					map.stair.append(qmappoint_t{ typeObject , point });

				map.data.insert(point, typeObject);//傳點
				continue;
			}
			//找傳點
			else if ((0xC00A == sLabel) || ((LOBYTE(sLabel) == 10) && (HIBYTE(sLabel) == 192)))
			{
				if ((util::OBJ_UP != typeObject) && (util::OBJ_DOWN != typeObject) && (util::OBJ_JUMP != typeObject))
					typeObject = util::OBJ_WARP;
				map.stair.append(qmappoint_t{ typeObject, point });
				map.data.insert(point, typeObject);//可通行
				continue;
			}

			//排除牆壁,障礙
			if ((sObject != 0) && (typeObject != util::OBJ_ROAD))
			{
				if (typeObject != util::OBJ_ROCK)
					map.data.insert(point, util::OBJ_WALL);
				else
					map.data.insert(point, util::OBJ_ROCK);
				reCheckAndRockEx(map, point, sObject);
				continue;
			}

			//排除非通行區塊 193 表示不能穿越該坐標，反之為 192
			if (HIBYTE(sLabel) == 193)
			{
				map.data.insert(point, util::OBJ_EMPTY);
				reCheckAndRockEx(map, point, sObject);
				continue;
			}

			if (typeObject == util::OBJ_ROCK)
			{
				map.data.insert(point, util::OBJ_ROCK);
				reCheckAndRockEx(map, point, sObject);
				continue;
			}

			//不是傳點則強制換成路
			if (((typeObject != util::OBJ_UP) && (typeObject != util::OBJ_DOWN) && (typeObject != util::OBJ_JUMP)) || (util::OBJ_ROAD == typeGround))
				typeObject = util::OBJ_ROAD;

			//如果是路，則加入可通行列表
			if ((util::OBJ_ROAD == typeObject) || (util::OBJ_BOUNDARY == typeObject))
				map.workable.insert(point);

			map.data.insert(point, typeObject);//可通行

			checkAndSetRockEx(map, point, sObject);

			if (!bret)
				bret = true;
		}
	}

	//繪製地圖圖像(只能在PaintEvent中繪製)
	draw();
	saveAsBinary(map, "");
	setMapDataByFloor(floor, map);
	return bret;
}

bool __fastcall MapAnalyzer::loadFromBinary(int floor, map_t* _map)
{
	QMutexLocker locker(&mutex_);
	if (!floor)
		return false;


	const QString fileName(util::applicationDirPath() + "/map/" + QString::number(floor) + ".dat");
	if (!QFile::exists(fileName)) return false;

	std::string f(fileName.toStdString());
	std::ifstream ifs(f, std::ios::binary | std::ios::in);
	if (!ifs.is_open())
	{
		return false;
	}

	util::ScopedFileLocker fileLock(fileName);

	map_t map = {};


	ifs.read(reinterpret_cast<char*>(&map.floor), sizeof(short));
	ifs.read(reinterpret_cast<char*>(&map.width), sizeof(short));
	ifs.read(reinterpret_cast<char*>(&map.height), sizeof(short));
	char name[24] = {};
	ifs.read(name, 24);
	map.name = QString(name);
	BYTE type = 0ui8;
	for (int x = 0; x < map.width; ++x)
	{
		for (int y = 0; y < map.height; ++y)
		{
			ifs.read(reinterpret_cast<char*>(&type), sizeof(BYTE));
			if (util::OBJ_MAX >= 0 && type < util::OBJ_MAX)
				map.data.insert(QPoint(x, y), static_cast<util::ObjectType>(type));
		}
	}

	//讀取
	int stairSize = 0;
	ifs.read(reinterpret_cast<char*>(&stairSize), sizeof(stairSize));
	for (int i = 0; i < stairSize; ++i)
	{
		qmappoint_t qmappoint = {};
		ifs.read(reinterpret_cast<char*>(&qmappoint.type), sizeof(BYTE));
		ifs.read(reinterpret_cast<char*>(&qmappoint.p.rx()), sizeof(short));
		ifs.read(reinterpret_cast<char*>(&qmappoint.p.ry()), sizeof(short));
		map.stair.append(qmappoint);
	}

	// QSet<QPoint> workable = {};
	int workableSize = 0;
	ifs.read(reinterpret_cast<char*>(&workableSize), sizeof(workableSize));
	for (int i = 0; i < workableSize; ++i)
	{
		QPoint point = {};
		ifs.read(reinterpret_cast<char*>(&point.rx()), sizeof(short));
		ifs.read(reinterpret_cast<char*>(&point.ry()), sizeof(short));
		map.workable.insert(point);
	}

	ifs.close();
	setMapDataByFloor(floor, map);
	if (_map)
	{
		*_map = map;
		pixMap_.remove(floor);
	}
	return true;
}

bool __fastcall MapAnalyzer::saveAsBinary(map_t map, const QString& fileName)
{
	QMutexLocker locker(&mutex_);
	if (!map.floor)
		return false;

	QString newFileName(fileName);
	if (fileName.isEmpty())
	{
		QDir dir(util::applicationDirPath() + "/map");
		if (!dir.exists())
			dir.mkpath(dir.absolutePath());

		newFileName = dir.absolutePath() + "/" + QString::number(map.floor) + ".dat";
	}

	//write to binary file
	std::string f = newFileName.toStdString();
	std::ofstream ofs(f, std::ios::binary | std::ios::out | std::ios::trunc);
	if (!ofs.is_open())
	{
		return false;
	}

	util::ScopedFileLocker fileLock(newFileName);

	ofs.write(reinterpret_cast<const char*>(&map.floor), sizeof(short));
	ofs.write(reinterpret_cast<const char*>(&map.width), sizeof(short));
	ofs.write(reinterpret_cast<const char*>(&map.height), sizeof(short));
	std::string name(map.name.toStdString());
	ofs.write(name.c_str(), 24);
	uint16_t x = 0;
	uint16_t y = 0;
	QPoint p = {};
	BYTE type = 0ui8;
	for (x = 0; x < map.width; ++x)
	{
		for (y = 0; y < map.height; ++y)
		{
			p.setX(x); p.setY(y);
			type = static_cast<BYTE>(map.data.value(p));
			ofs.write(reinterpret_cast<const char*>(&type), sizeof(BYTE));
		}
	}

	//寫入
	int size = map.stair.size();
	ofs.write(reinterpret_cast<const char*>(&size), sizeof(size));
	for (int i = 0; i < size; ++i)
	{
		ofs.write(reinterpret_cast<const char*>(&map.stair[i].type), sizeof(BYTE));
		ofs.write(reinterpret_cast<const char*>(&map.stair[i].p.rx()), sizeof(short));
		ofs.write(reinterpret_cast<const char*>(&map.stair[i].p.ry()), sizeof(short));
	}

	// QSet<QPoint> workable = {};
	size = map.workable.size();
	ofs.write(reinterpret_cast<const char*>(&size), sizeof(size));
	QList<QPoint> list = map.workable.values();
	for (int i = 0; i < size; ++i)
	{
		x = list[i].x();
		y = list[i].y();
		ofs.write(reinterpret_cast<const char*>(&x), sizeof(short));
		ofs.write(reinterpret_cast<const char*>(&y), sizeof(short));
	}

	ofs.flush();
	ofs.close();

	//cimage img(map.width, map.height);
	//for (uint16_t x = 0; x < map.width; ++x)
	//{
	//	for (uint16_t y = 0; y < map.height; ++y)
	//	{
	//		util::ObjectType type = map.data[QPoint{ x, y }];
	//		QColor color = MAP_COLOR_HASH.value(type, QColor(0, 0, 0));
	//		CRGB fillColor = { (uint8_t)color.red(), (uint8_t)color.green(), (uint8_t)color.blue() };
	//		img.setPixel(QPoint{ x, y }, fillColor);
	//	}
	//}
	//std::string path = "d:/";
	//path += std::to_string(map.floor);
	//path += +".bmp";
	//std::ofstream file(path, std::ios::binary);
	//file << img;

	return true;
}

bool __fastcall MapAnalyzer::calcNewRoute(const map_t& map, const QPoint& src, const QPoint& dst, QVector<QPoint>* path)
{
	util::ObjectType obj = map.data.value(dst, util::OBJ_UNKNOWN);
	bool isWrapPoint = (obj == util::OBJ_WARP) || (obj == util::OBJ_JUMP) || (obj == util::OBJ_UP) || (obj == util::OBJ_DOWN);
	Injector& injector = Injector::getInstance();

	Callback callback = [&map, &injector, isWrapPoint](const QPoint& point)->bool
	{
		const util::ObjectType obj = map.data.value(point, util::OBJ_UNKNOWN);

		//村內避免踩NPC
		if (map.floor == 2000)
		{
			if (injector.server->npcUnitPointHash.contains(point))
			{
				mapunit_t unit = injector.server->npcUnitPointHash.value(point);
				if (unit.type == util::OBJ_NPC && unit.graNo > 0)
					return false;
			}

			//送貨門口傳點容易誤踩
			if (point == QPoint(102, 80) || point == QPoint(103, 80))
				return false;
		}

		//If the destination coordinates are a teleportation point, treat it as a non-obstacle
		if (isWrapPoint)
			return (obj == util::OBJ_ROAD) || (obj == util::OBJ_WARP) || (obj == util::OBJ_JUMP) || (obj == util::OBJ_UP) || (obj == util::OBJ_DOWN);
		else
			return  (obj == util::OBJ_ROAD);
	};

	QVector<QPoint> pathret = {};

	CAStar astar;
	CAStarParam param(map.height, map.width, callback, src, dst);

	pathret = astar.find(param);

	bool bret = pathret.size() > 0;
	if (bret)
	{
		if (path)
			*path = pathret;
	}
	return bret;
}

//快速檢查是否能通行
bool __fastcall MapAnalyzer::isPassable(int floor, const QPoint& src, const QPoint& dst)
{

	bool bret = false;
	do
	{
		map_t map;
		getMapDataByFloor(floor, &map);
		if (!readFromBinary(floor, map.name)) break;
		if (!getMapDataByFloor(floor, &map)) break;

		if (src == dst)
			return true;

		auto can_pass = [&map](const QPoint& p)->bool
		{
			const util::ObjectType& obj = map.data.value(p, util::OBJ_UNKNOWN);
			return obj == util::OBJ_ROAD;
			//return ((obj != util::OBJ_EMPTY) && (obj != util::OBJ_WATER) && (obj != util::OBJ_UNKNOWN) && (obj != util::OBJ_WALL) && (obj != util::OBJ_ROCK) && (obj != util::OBJ_ROCKEX));
		};

#ifdef USE_BLOCK_ALLOCATOR
		BlockAllocator allocator;
#endif
		CAStar a;
		const CAStarParam p(map.height, map.width, can_pass, src, dst);
		QVector<QPoint> pathret;
		pathret = a.find(p);
		return pathret.size() > 0;
	} while (false);

	return bret;
}

// 取靠近目標的最佳座標和方向
int __fastcall MapAnalyzer::calcBestFollowPointByDstPoint(int floor, const QPoint& src, const QPoint& dst, QPoint* ret, bool enableExt, int npcdir)
{

	QVector<qdistance_t> disV;// <distance, point>
	map_t map = {};
	getMapDataByFloor(floor, &map);
	int d = 0;
	int invalidcount = 0;
	for (const QPoint& it : util::fix_point)
	{
		qdistance_t c = {};
		c.dir = d;
		c.pf = dst + it;
		c.p = dst + it;
		if (src == c.p)//如果已經在目標點
		{
			if (ret)
				*ret = c.p;
			int n = c.dir + 4;
			return ((n) <= (7)) ? (n) : ((n)-(MAX_DIR));
		}

		if (isPassable(floor, src, dst + it))//確定是否可走
		{
			//計算src 到 c.p直線距離
			c.distance = std::sqrt(std::pow((qreal)src.x() - c.pf.x(), 2) + std::pow((qreal)src.y() - c.pf.y(), 2));
		}
		else//不可走就隨便加個超長距離
		{
			c.distance = std::numeric_limits<double>::max();
			++invalidcount;
		}
		++d;
		disV.append(c);
	}

	if (invalidcount >= MAX_DIR && enableExt && npcdir != -1)//如果周圍8格都不能走搜尋NPC面相方向兩格(中間隔著櫃檯)
	{
		for (int i = 0; i < 7; ++i)
		{
			QPoint newP;
			switch (i)//找出NPC面相方向的兩格
			{
			case 0://NPC面相北找往北兩格
				newP = dst + QPoint(0, -2);
				break;
			case 2://NPC面相東
				newP = dst + QPoint(2, 0);
				break;
			case 4://NPC面相南
				newP = dst + QPoint(0, 2);
				break;
			case 6://NPC面相西
				newP = dst + QPoint(-2, 0);
				break;
			}

			if (isPassable(floor, src, newP) || src == newP)//確定是否可走
			{
				//qdistance_t c = {};
				//要面相npc的方向  (當前人物要面向newP的方向)
				if (ret)
					*ret = newP;
				int n = npcdir + 4;
				return ((n) <= (7)) ? (n) : ((n)-(MAX_DIR));
			}
		}
		return -1;
	}
	else if (invalidcount >= 8)// 如果周圍8格都不能走
	{
		return -1;
	}

#if _MSVC_LANG > 201703L
	std::ranges::sort(disV, compareDistance);
#else
	std::sort(disV.begin(), disV.end(), compareDistance);
#endif
	if (!disV.size()) return -1;
	if (ret)
		*ret = disV.at(0).p;
	//計算方向
	int n = disV.at(0).dir + 4;
	return ((n) <= (7)) ? (n) : ((n)-(MAX_DIR));//返回方向
}
